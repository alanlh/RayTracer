#ifndef COLORMIXER_H
#define COLORMIXER_H

#include "HSLAPixel.h"

#include <vector>

class ColorMixer {
 public:
  ColorMixer();
  ColorMixer(ColorMixer &other);

  ColorMixer& operator=(ColorMixer &other);
  
  void AddColor(cs225::HSLAPixel pix, unsigned type, double intensity);

  /** Mixes a set of colors by weights determined by type **/
  cs225::HSLAPixel RenderObjectColor();
  /** For anti-aliasing, when there are two objects mixed **/
  /** Picks whichever light has the highest luminosity **/
  cs225::HSLAPixel RenderAntiAlias();
  
  const static unsigned default_color_ = 0;
  const static unsigned surface_color_ = 1;
  const static unsigned directional_light_ = 2;
  const static unsigned ambient_light_ = 3;

  // These are currently placeholders. Not used. 
  // Surface color provides most of the color, but little luminosity.
  constexpr static double default_surface_weight_ = 1;
  // Lights provide most of the luminosity, but do not significant affect color
  // The color change is weighted by saturation. 
  constexpr static double default_light_weight_ = 1.5;
  
 private:
  std::vector<cs225::HSLAPixel> colors;
  std::vector<unsigned> types;
  std::vector<double> intensities;

  // Currently stays at one, but should depend on object
  double surface_weight_;
  double light_weight_;

  double sigmoid(double in);
  double inverse(double in);
  
};

#endif
